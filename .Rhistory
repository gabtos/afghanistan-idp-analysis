labs(
title = "Number of IDPs by District",
subtitle = "UNHCR Survey Data Afghanistan 2021",
)
top_10_districts <- un_survey %>%
dplyr::select(district, total_members, DISTID) %>%
group_by(district) %>%
summarise(number_of_idps = sum(total_members)) %>%
arrange(-number_of_idps) %>%
slice(1:10)
knitr::kable(
top_10_districts,
col.names = c("District", "Number of IDPs"),
caption = "Top 10 districts by number of IDPs"
)
top_10_districts %>%
select(district, number_of_idps) %>%
ggplot() +
geom_col(aes(x = reorder(district, number_of_idps), y = number_of_idps)) +
labs(
title = "Internally Displaced Persons by District: Top 10 Districts",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "District",
y = "Number IDPs"
) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000))
un_survey <- un_survey %>%
dplyr::mutate(lcs_score = calc_sold_asset + calc_seek_employment + calc_working + calc_borrow + calc_medical_attention)
summary(un_survey$lcs_score)
ggplot(un_survey, aes(x=lcs_score)) +
geom_histogram(color="white",binwidth = 1) +
labs(
title = "LCS Score Distribution",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "LCS Score",
y = "Frequency"
) +
scale_y_continuous(breaks = seq(0, 15000, by = 2000)) +
scale_x_continuous(breaks = seq(0, 6, by=1))
#Creating the lcs_severity variable
un_survey <- un_survey %>%
mutate(lcs_severity = case_when(
lcs_score == 0 ~ "None",
lcs_score == 1 ~ "Stress",
lcs_score == 2 ~ "Crisis",
lcs_score >= 3 ~ "Emergency"
))
#Total number of households by lcs_severity
lcs_severity_household_count <- un_survey %>%
group_by(lcs_severity) %>%
summarize(count = n()) %>%
arrange(-count)
lcs_severy_count_plot <- ggplot(lcs_severity_household_count) +
geom_col(aes(x = reorder(lcs_severity, -count), y = count)) +
labs(
title = "Number of Housholds by LCS Severity",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Severity Category",
y = "Number Households" ) +
scale_y_continuous(breaks = seq(0, 35000, by = 2000))
knitr::kable(lcs_severity_household_count)
lcs_severity_dist_plot <- ggplot(un_survey, aes(x=lcs_score)) +
geom_histogram(colour="white", binwidth = 1) +
labs(
title = "LCS Severity Distribution",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "LCS Severity",
y = "Frequency"
) +
scale_x_continuous(breaks = seq(0, 5, by = 1)) +
scale_y_continuous(breaks = seq(0, 20000, by = 2000))
#calculate RCSI Score
un_survey <- un_survey %>%
mutate(rcsi_score = food_coping1 + (food_coping2 * 2) + food_coping3 + (food_coping4 * 3) + food_coping5)
# Distribution Summary
summary(un_survey$rcsi_score)
#Plot RCSI distribution
ggplot(un_survey, aes(x=rcsi_score)) +
geom_histogram(color="white", binwidth = 1) +
labs(
title = "RCSI Score Distribution",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "RCSI Score",
y = "Frequency"
) +
scale_x_continuous(breaks = seq(0, 100, by = 2)) +
scale_y_continuous(breaks= seq(0, 10000, by=500))
cor.test(un_survey$lcs_score, un_survey$rcsi_score, method = "pearson")
un_survey %>% ggplot() +
geom_smooth(mapping = aes(x = rcsi_score, y = lcs_score), method=lm) +
labs(
title = "RCSI Score and LCS Score Correlation",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "RCSI Score",
y = "LCS Score"
)
water_safety <- un_survey %>%
dplyr::select(distance_water) %>%
drop_na() %>%
group_by(distance_water) %>%
summarize(count = n())
#Updating blank values to unknown
water_safety$distance_water[water_safety$distance_water == ""] <- "Unknown"
latrine <- un_survey %>%
dplyr::select(latrine) %>%
group_by(latrine) %>%
summarise(count = n())
#Updating latrine names for graph
latrine$latrine[latrine$latrine == ""] <- "Unknown"
latrine$latrine[latrine$latrine == "None (open field, bush) or sahrahi, dearan (area inside or outside compound but not pit), or other"] <- "None, sahrahi, dearan, other"
ggplot(water_safety) +
geom_col(aes(x = reorder(distance_water, -count), y = count)) +
labs(
title = "Distance to Water",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Distance to water > 500 meters",
y = "Frequency"
)
ggplot(latrine) +
geom_col(aes(x = reorder(latrine, -count), y = count)) +
labs(
title = "Latrine Frequency by Type",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Latrine Type",
y = "Frequency"
) +  theme(axis.text.x = element_text(angle = 55, vjust = 1, hjust=1))
num_shelter_type <- un_survey %>%
dplyr::select(shelter) %>%
group_by(shelter) %>%
summarize(count = n()) %>%
arrange(-count)
#bundle the lowest frequency cats, and in write-up talk about how they were grouped!!
bundle_sum <- 0
shelter_to_bundle <- c("Tent or Emergency shelter","Makeshift shelter", "Collective centre", "Open space or no shelter", "" )
for(i in 1:length(num_shelter_type$shelter)){
curr_shelter <- num_shelter_type$shelter[i]
if (curr_shelter %in% shelter_to_bundle) {
bundle_sum <- bundle_sum + num_shelter_type$count[i]
}
}
#Remove rows that are part of our bundled, and then add the new bundled row
num_shelter_type_bundled <- subset(num_shelter_type, !num_shelter_type$shelter %in% shelter_to_bundle) %>%
add_row(shelter = "Informal, emergency or unknown shelter*", count = bundle_sum)
ggplot(num_shelter_type_bundled) +
geom_col(aes(x = reorder(shelter, -count), y = count)) +
labs(
title = "Total Number of Shelters by Type",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Shelter Type",
y = "Number Shelters"
) +  theme(axis.text.x = element_text(angle = 55, vjust = 1, hjust=1)) +
scale_y_continuous(breaks = seq(0, 20000, by = 2500))
knitr::kable(num_shelter_type_bundled)
num_tenure_household <- un_survey %>%
dplyr::select(tenure) %>%
group_by(tenure) %>%
summarize(count = n()) %>%
arrange(-count)
#Shortening row names for graphing
bundle_sum = 0
tenure_to_bundle <- c("Other", "")
for(i in 1:length(num_tenure_household$tenure)){
curr_tenure <- num_tenure_household$tenure[i]
#add to the bundle sum
if (curr_tenure %in% shelter_to_bundle) {
bundle_sum <- bundle_sum + num_tenure_household$count[i]
#change names
}
if(curr_tenure == "Insecure tenure status as rent, hosted, iSETs, labour exchanged, etc..)"){
num_tenure_household$tenure[i] <- "Insecure tenure"
}
if(curr_tenure == "Squatting, as occupation without permission, including collective centres"){
num_tenure_household$tenure[i] <- "Squatting"
}
if(curr_tenure == "Owned (land deed, customary tenure document, letter of permission from government authorities)"){
num_tenure_household$tenure[i] <- "Owned"
}
}
#Bundling all blank, other categories
num_tenure_bundled <- subset(num_tenure_household, !num_tenure_household$tenure %in% tenure_to_bundle) %>%
add_row(tenure = "Other*", count = bundle_sum) %>%
arrange(-count)
ggplot(num_tenure_bundled) +
geom_col(aes(x = reorder(tenure, -count), y = count)) +
labs(
title = "Total Number of Households by Tenure",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Tenure Type",
y = "Frequency"
) +  theme(axis.text.x = element_text(angle = 55, vjust = 1, hjust=1))
knitr::kable(num_tenure_bundled)
movement_intentions <- un_survey %>%
dplyr::select(hh_intentions_movements) %>%
group_by(hh_intentions_movements) %>%
summarize(count = n())
top_movement_plot <- movement_intentions %>%
arrange(-count) %>%
slice(1:2) %>%
ggplot() +
geom_col(aes(x = reorder(hh_intentions_movements, -count), y = count/1000)) +
labs(
title = "Count of Households by Moving Intentions (> 1,000)",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Movement Intention",
y = "Household Count (thousands)"
)
bottom_movement_plot <- movement_intentions %>%
arrange(-count) %>%
slice(3:4) %>%
ggplot() +
geom_col(aes(x = reorder(hh_intentions_movements, -count), y = count)) +
labs(
title = "Count of Households by Moving Intentions (< 1000)",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Movement Intention",
y = "Household Count"
)
# Create a new page
grid.newpage()
# Next push the vissible area with a layout of 2 columns and 2 row using pushViewport()
pushViewport(viewport(layout = grid.layout(2,1)))
print(top_movement_plot, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(bottom_movement_plot, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
received_assistance <- un_survey %>%
dplyr::select(assistance, cash_qtty) %>%
filter(assistance == "Yes" & !is.na(cash_qtty))
received_assistance %>% ggplot(aes(x=cash_qtty/1000)) +
geom_histogram(color="white" , binwidth = 1) +
labs(
title = "Assistance Received by Household",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Cash Assistance Quantity (thousands)",
y = "Frequency"
)
received_assistance %>% ggplot( aes(x=cash_qtty/1000)) +
geom_boxplot(fill="gray") +
labs(
title = "Assistance Received by Household",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Cash Assistance Quantity (thousands)",
y = "Frequency"
)
#count records (rows) for each district (DISTID)
district_count <- un_survey %>%
dplyr::select(DISTID) %>%
group_by(DISTID) %>%
summarize(count = n())
geo_count_merge <- merge(geography_gdf, district_count, by = "DISTID", all.x = TRUE)
ggplot() +
geom_sf(data = geo_count_merge, aes(fill = count), color="white") +
scale_fill_viridis_c(name = "Household Count", breaks = seq(0, 3000, 500))+   labs(
title = "Houshold Count by District",
subtitle = "UNHCR Survey Data Afghanistan 2021",
)
#looking at this plot and the data, there are a total of 398 districts but only 149 have data
district_lcs_avg <- un_survey %>%
dplyr::select(DISTID, lcs_score) %>%
group_by(DISTID) %>%
summarize(avg_lcs = mean(lcs_score))
geo_lcs_count_merge <- merge(geography_gdf, district_lcs_avg, by = "DISTID", all.x = TRUE)
ggplot() +
geom_sf(data = geo_lcs_count_merge, aes(fill = avg_lcs), color="white") +
scale_fill_viridis_c(name = "Mean LCS Score") +
labs(
title = "Mean LCS score by District",
subtitle = "UNHCR Survey Data Afghanistan 2021",
)
district_rcsi_avg <- un_survey %>%
dplyr::select(DISTID, rcsi_score) %>%
group_by(DISTID) %>%
summarize(avg_rcsi = mean(rcsi_score))
geo_rcsi_merge <- merge(geography_gdf, district_rcsi_avg, by = "DISTID", all.x = TRUE)
ggplot() +
geom_sf(data = geo_rcsi_merge, aes(fill = avg_rcsi), color="white") +
scale_fill_viridis_c(name = "Mean RCSI Score") +
labs(
title = "Mean RCSI score by District",
subtitle = "UNHCR Survey Data Afghanistan 2021",
)
#finding the largest category of shelter by district
district_shelter <- un_survey %>% dplyr::select(DISTID, shelter, shelter_number) %>%
group_by(DISTID, shelter) %>%
summarise(count = sum(shelter_number)) %>%
ungroup() %>%
drop_na() %>%
group_by(DISTID, shelter) %>%
summarise(count = max(count, na.rm = FALSE)) %>%
group_by(DISTID) %>%
filter(count == max(count, na.rm=TRUE))
geo_shelter_merge <- merge(geography_gdf, district_shelter, by = "DISTID", all.x = TRUE)
# plot
ggplot() + geom_sf(data = geo_shelter_merge, aes(fill = shelter))+
labs(
title = "Most Prominent Shelter Type by District",
subtitle = "UNHCR Survey Data Afghanistan 2021",
)
hh_intentions <- un_survey %>%
dplyr::select(DISTID, hh_intentions_movements) %>%
group_by(DISTID, hh_intentions_movements) %>%
summarize(count = n()) %>%
group_by(DISTID) %>%
filter(count == max(count, na.rm=TRUE))
geo_hh_intentions_merge <- merge(geography_gdf, hh_intentions, by = "DISTID", all.x = TRUE)
# plot
ggplot() + geom_sf(data = geo_hh_intentions_merge, aes(fill = hh_intentions_movements))+
labs(
title = "Household Movement Intentions by District",
subtitle = "UNHCR Survey Data Afghanistan 2021",
)
library(caret)
library(MASS)
#reading files
activity_df <- read_csv('UNHRC_afghanistan_idp_data/displaced_activity-1.csv') %>%
rename(DISTID = distid )
features_df <- read_csv("UNHRC_afghanistan_idp_data/Features-1.csv")
#merging dataframes for linear modeling
lm_data <- merge(activity_df, features_df, by="DISTID") %>%
na.omit() %>%
dplyr::select(c("DISTID","unique_devices","displaced_persons", "urban", "displaced_activity", "nightlight", "shareagri", "district_hospital", "foodmarket_time", "microfinance_aid", "news_tvset", "road_aid", "ruggedness", "project_any", "watersource_time", "suitability_rw_wheat", "affected_opium", "watersupply_aid", "madrassa", "total_markets", "anybase", "religious_involved", "electricity_aid", "project_agriculture"))
#Checking distribution of outcome variable
ggplot(lm_data, aes(x=displaced_activity)) +
geom_histogram() +
labs(
title = "Displaced Activity Variable Distribution",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Displaced Activity",
y = "Frequency")
#Strong Covariance between displaced activity and displaced persons, removing displaced persons as a variable
cov(lm_data$displaced_activity, lm_data$displaced_persons)
lm_data <- lm_data %>%
dplyr::select(-displaced_persons)
##-----------------------------
# Stepwise Approach
##-----------------------------
# Set seed for reproducibility
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(displaced_activity ~., data = lm_data,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:10),
trControl = train.control
)
#See models' results
step.model$results
summary(step.model$finalModel)
# Get the coefficients of the best performing model
coef(step.model$finalModel, 3)
#using our best fit model from step-wise regression, we
#get our final summary using a single linear model
#There's  covarience here with nighlight and urban variables, which may introduce bias
lm_best_step <-  lm(displaced_activity~ unique_devices + nightlight + urban + anybase, data = lm_data)
summary(lm_best_step)
#produce added variable plots
avPlots(lm_best_step)
# Plot Model predicted values and actual values
quant_plot <- plot(predict(lm_best_step), lm_data$displaced_activity,
xlab = "Predicted Values",
ylab = "Observed Values")
title(main = "Predicted vs. Observed Values for Stepwise Model",
sub = "displaced_activity ~ unique_devices + nightlight + urban + anybase")
abline(a = 0, b = 1, lwd=2,
col = "green")
##-----------------------------
# Theory-based Approach
##-----------------------------
lm_qual <- lm(displaced_activity ~ watersource_time + total_markets + shareagri + project_agriculture, data=lm_data)
summary(lm_qual)
#produce added variable plots
avPlots(lm_qual)
model_names <- c("Stepwise Model", "Theory-based Model")
# Combine the residuals and model identifiers into a data frame
residuals_data <- data.frame(
Model = factor(rep(model_names)),
Residuals = c(lm_best_step$residuals, lm_qual$residuals)
)
residuals_data %>% ggplot( aes(x=Model, y=Residuals, fill=Model)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Comparing Model Performance", subtitle = "Model Residuals") +
xlab("") +
ylim(-5000, 5000) +
coord_flip()
confint(lm_best_step)
summary(lm_best_step)
#Find the least urbanized districts (most influential) INCREASE
lowest_urban <- features_df %>%
dplyr::select(DISTID, urban) %>%
arrange(urban)
#Find the districts with the least bases INCREASE
lowest_bases <- features_df %>%
dplyr::select(DISTID, anybase) %>%
arrange(anybase)
#Find the districts with the most nighlight (least influential) DECREASE
highest_nightlight <- features_df %>%
dplyr::select(DISTID, nightlight) %>%
arrange(-nightlight)
#put all data frames into list
df_list <- list(lowest_urban, lowest_bases, highest_nightlight)
#merge all data frames in list
intervention_dist <- df_list %>% reduce(full_join, by='DISTID') %>%
drop_na() %>%
group_by(urban, anybase, nightlight) %>%
arrange(-nightlight) %>%
filter(urban == 0 & anybase == 0) %>%
ungroup()
intervention_dist_shortlist <- intervention_dist %>%
slice(1:5)
knitr::kable(intervention_dist_shortlist)
population <- read_csv("UNHRC_afghanistan_idp_data/Population.csv") %>%
rename(DISTID = distid)
all_dist_population <- population %>%
summarize(population = sum(total_population))
dist_survey_sample <- un_survey %>%
dplyr::select(total_members) %>%
drop_na() %>%
summarize(survey_population = sum(total_members))
#Population 25354500
#Surveyed population 262740
#Representative sample size = 2401 with a 2% margin of error at 95% confidence level
#Since Survey sample size is 262740, we can say that this is a representative sample size with a 0.19% margin of error at 95% confidence level
#Dropped NA's prior to sum so we keep as many district info as possible
dist_survey_sample <- un_survey %>%
dplyr::select(DISTID, total_members) %>%
drop_na() %>%
group_by(DISTID) %>%
summarise(survey_count = sum(total_members))
dist_survey_sample <- merge(population, dist_survey_sample, by="DISTID") %>%
mutate(idp_density = survey_count / total_population) %>%
mutate(bound = "unbound")
#Extreme outliers and a skew
ggplot(dist_survey_sample, aes(x=idp_density)) +
geom_histogram() +
labs(
title = "IDP Density Distribution",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "IDP Density",
y = "Frequency")
#Since we don't have a normal distribution, we'll use the IQR to identify outliers by calculating upper and lower fences
iqr <- 0.0249496 - 0.0014913
# Define the normal data range with lower limit as Q1–0.0001*IQR and upper limit as Q3+0.0001*IQR.
lower_bound = 0.0014913-0.0001*iqr
upper_bound = 0.0249496+0.0001*iqr
dist_survey_sample_bound <- dist_survey_sample %>%
filter(idp_density <= upper_bound & idp_density >= lower_bound) %>%
mutate(type = "bound")
ggplot(dist_survey_sample_bound, aes(x=idp_density)) +
geom_histogram() +
labs(
title = "IDP Density Distribution (Bound)",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "IDP Density",
y = "Frequency")
#Comparing IDP Densities
#True distribution
summary(dist_survey_sample$idp_density)
# sd(dist_survey_sample$idp_density)
#Bound distribution
summary(dist_survey_sample_bound$idp_density)
# sd(dist_survey_sample_bound$idp_density)
#we'll consider any districts under the lower bound as undersampled, and any over the upper_bound as oversampled
dist_survey_oversampled <- dist_survey_sample %>%
dplyr::select(DISTID, idp_density) %>%
filter(idp_density >= upper_bound)
dist_survey_undersampled <- dist_survey_sample %>%
dplyr::select(DISTID, idp_density) %>%
filter(idp_density <= lower_bound)
knitr::kable(dist_survey_oversampled)
knitr::kable(dist_survey_undersampled)
un_survey_2 <- un_survey %>%
dplyr::select(DISTID, healthcare_barriers1, healthcare_barriers2, healthcare_barriers3, healthcare_barriers4, healthcare_barriers5, healthcare_barriers6, healthcare_barriers7, healthcare_barriers8, healthcare_barriers9, healthcare_barriers10, healthcare_barriers11, healthcare_barriers12)
barrier_list <- c("healthcare_barriers1", "healthcare_barriers2", "healthcare_barriers3", "healthcare_barriers4", "healthcare_barriers5", "healthcare_barriers6", "healthcare_barriers7", "healthcare_barriers8", "healthcare_barriers9", "healthcare_barriers10", "healthcare_barriers11", "healthcare_barriers12")
#replace all NA's with zeros
un_survey_2 <- un_survey_2 %>%
mutate_all(~replace_na(., 0))
#add all healthcare barrier row values
un_survey_2 <- un_survey_2 %>%
mutate(healthcare_barriers = rowSums(un_survey_2[,barrier_list])) %>%
dplyr::select(DISTID, healthcare_barriers)
healthcare_model_data <- merge(lm_data, un_survey_2, by="DISTID")
cor.test(healthcare_model_data$healthcare_barriers, healthcare_model_data$displaced_activity, method = "pearson")
healthcare_model_data %>% ggplot() +
geom_smooth(mapping = aes(x = displaced_activity, y = healthcare_barriers), method=lm) +
labs(
title = "Displaced Activity and Healthcare Barriers Correlation",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Displaced Activity",
y = "Healthcare Barriers"
)
ggplot(un_survey_2, aes(x=healthcare_barriers)) +
geom_histogram(color="white") +
labs(
title = "Healthcare Barriers Distribution",
subtitle = "UNHCR Survey Data Afghanistan 2021",
x = "Healthcare Barriers Score",
y = "Frequency"
)
healthcare_model <- lm(displaced_activity ~ healthcare_barriers, data=healthcare_model_data)
summary(healthcare_model)
geo_count_merge <- merge(geography_gdf, healthcare_model_data, by = "DISTID", all.x = TRUE)
ggplot() +
geom_sf(data = geo_count_merge, aes(fill = healthcare_barriers), color="white") +
scale_fill_viridis_c(name = "Healthcare Barrier Score", breaks = seq(0, 11, 1)) +
labs(
title = "Healthcare Score by District",
subtitle = "UNHCR Survey Data Afghanistan 2021",
)
